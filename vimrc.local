"       HOW TO DO 90% OF WHAT PLUGINS DO (WITH JUST VIM)
"                          Max Cantor
"               NYC Vim Meetup -- August 3, 2016

" FEATURES TO COVER:
" - Fuzzy File Search
" - Tag jumping
" - Autocomplete
" - File Browsing
" - Snippets
" - Build Integration (if we have time)

" GOALS OF THIS TALK:
" - Increase Vim understanding
" - Offer powerful options

" NOT GOALS OF THIS TALK:
" - Hate on plugins
" - Get people to stop using plugins


" BASIC SETUP:

" enter the current millenium
set nocompatible
" enable syntax and plugins (for netrw)
syntax enable
"autocmd BufEnter * :syntax sync fromstart
filetype plugin on
" Make sure we set clipboard according to our OS
if system('uname -s') == "Darwin\n"
  set clipboard=unnamed
  "OSX
else
  set clipboard=unnamedplus
  "Linux
endif
" keep 1000 entries of entered commands
set history=1000    
" Show the line and column number of the cursor position
set ruler
" Show (partial) command in the last line of the screen
set showcmd         
" break words
set lbr
" keeps a few lines of context around the cursor top/bottom
" disable search highlighting
" temporarily disable highlighting for current search (this will not disable it for next searches)
set hlsearch
" display the search match while still typing
set incsearch
" return both uppercase and lowercase search results
set ignorecase
" when case was used inside search do not skip ignorecase setting
set smartcase
" automatically save any changes made to the buffer before it is hidden
set autowrite
" autmoatically update content in vim if file was changes elsewhere
set autoread
" keep 20 lines visible above and below cursor at all times
set scrolloff=50
" keep 30 columns visible left and right of the cursor at all times
set sidescrolloff=50   
" filetype plugin indent on
" show existing TAB with 4 spaces width
set tabstop=4		
" when indenting with `>`, use 4 spaces width
set shiftwidth=4	
" on pressing TAB, insert 4 spaces
set expandtab		
" do not wrap words
set nowrap
" more powerful backspacing
set backspace=indent,eol,start
" yank workd > replace word
map <C-j> cw<C-r>0<Esc>

" LEADER MAPPINGS:

"let mapleader = ","
" Disable highlight search upon pressing ESC
nnoremap ss :nohls<CR>
" regex completion instead of whole word completion
nnoremap ,f :find *
nnoremap ,s :sfind *
nnoremap ,v :vert sfind *
" map SPACE-o to open buffer list and automatically enter :b[waiting for number input] to easily switch to a different buffer
:nmap bo :ls<CR>:silent :vert sb<Space>
":nmap <C-B> :ls<CR>:silent :b<Space>



" THEME SETUP:

set background=dark
let g:gruvbox_italic=1
" Changes dark mode contrast. Overrides g:gruvbox_contrast option. Possible values are soft, medium and hard.
" default: medium
let g:gruvbox_contrast_dark='hard'
" Changes light mode contrast. Overrides g:gruvbox_contrast option. Possible values are soft, medium and hard.
" default: medium
let g:gruvbox_contrast_light='soft'
colorscheme gruvbox
set t_Co=256
set termguicolors
set number
set relativenumber
set cursorline



" FINDING FILES:

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Display all matching files when we tab complete
set wildmenu
set nocompatible wildmenu
set wildmode=full
set wildignorecase
set wildignore=.git
"set wildignore=*.foo,*bar

" always display current filename in status bar
set laststatus=2

" NOW WE CAN:
" - Hit tab to :find by partial match
" - Use * to make it fuzzy

" THINGS TO CONSIDER:
" - :b lets you autocomplete any open buffer



" TAG JUMPING:

" Create the `tags` file (may need to install ctags first)
command! MakeTags !ctags -R .

" NOW WE CAN:
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack

" THINGS TO CONSIDER:
" - This doesn't help if you want a visual list of tags



" AUTOCOMPLETE:

" The good stuff is documented in |ins-completion|

function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>

" HIGHLIGHTS:
" - ^x^n for JUST this file
" - ^x^f for filenames (works with our path trick!)
" - ^x^] for tags only
" - ^n for anything specified by the 'complete' option

" NOW WE CAN:
" - Use ^n and ^p to go back and forth in the suggestion list



" SNIPPETS:

" Read an empty HTML template and move cursor to title
nnoremap ,html :-1read $HOME/.vim/.skeleton.html<CR>3jwf>a

" NOW WE CAN:
" - Take over the world!
"   (with much fewer keystrokes)



" BUILD INTEGRATION:

" Steal Mr. Bradley's formatter & add it to our spec_helper
" http://philipbradley.net/rspec-into-vim-with-quickfix

" Configure the `make` command to run RSpec
set makeprg=bundle\ exec\ rspec\ -f\ QuickfixFormatter

" NOW WE CAN:
" - Run :make to run RSpec
" - :cl to list errors
" - :cc# to jump to error by number
" - :cn and :cp to navigate forward and back



" FILE BROWSING:

" Tweaks for browsing
" disable annoying banner
let g:netrw_banner=0        
" preview window shown in a vertically split window
" let g:netrw_preview=4
" let g:netrw_winsize=30
let g:netrw_altv=1          " open splits to the right
" let g:netrw_list_hide=netrw_gitignore#Hide()
" let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'
" let g:netrw_browse_split=4  " open in prior window
" let g:netrw_liststyle=3     " tree view
" let g:netrw_liststyle = 3
" let g:netrw_winsize   = 20
" let g:netrw_browse_split=3  " open in prior window

" NOW WE CAN:
" - :edit a folder to open a file browser
" - <CR>/v/t to open in an h-split/v-split/tab
" - check |netrw-browse-maps| for more mappings

" open file browser to the left


"                          THANK YOU!
"                    Download this file at:
"                github.com/mcantor/no_plugins
"                Follow me for kitten pictures:
"                     twitter.com/mcantor
"          Contact me at `max at maxcantor dot net` for:
"                  - Consulting (Dev and PM)
"                          - Tutoring
"                     - Classroom Teaching
"                     - Internal Training
"                       - Encouragement





" CUSTOM VIM SCRIPTS AND FRUNCTIONS:

" NERDTREE LIGHT:
" Make Netrw function like NerdTree (I would call this NerdTree Light)
" In the below example we use ",c" to open and close Netrw explorer.
" ",c" is a synonym to "S" which basically deletes a line and puts you in
" insert mode. So if you are used to ",c" either start using "S" or use a
" different key, or use a leader + key of your choosing e.g: "<leader>e".
" Check out the following URL for unused keys which can be savely mapped:
" https://vim.fandom.com/wiki/Unused_keys
" When your leader key is set to "," (comma) you could use ",e" to open up the
" Define where to put the explorere window
" Possible options are: "left", "right", "top", "bottom"

" Where to position the explorer window?
let g:NTL_Position = "left"
" Set a width for the left/right positions
let g:NTL_Width = 30
" Set a width for the top/bottom positions
let g:NTL_Height = 15

" Optionally set key binding "timeouts", look at ":help timeout" for more info
" set timeout timeoutlen=150 ttimeoutlen=100
" Mapping ",c" to the function which opens the Netrw explorer
" and toggles between the buffers (windows)
nnoremap ,c :call NTL_Toggle()<CR>
" Remember the last known location in Netrw, so that we can open the according
" buffer after re-opening the explorer.
let g:NTL_LastKnownBuffer = -1 
" When leaving a buffer make sure to remember it
autocmd BufLeave * call s:NTL_ExecuteLeave()
function s:NTL_ExecuteLeave()
    if(NTL_GetBufferFileType()=='netrw')
        " Save last known buffer, so we can return to this
        " location/directory when going back
        let g:NTL_LastKnownBuffer = bufnr("%")
    endif
endfunction
" Get the current buffer file type, used to determine if the buffer belongs to
" Netrw
function NTL_GetBufferFileType()
    return getbufvar(bufnr("%"), "&filetype")
endfunction
" Function that will try to switch from a normal buffer to an existing Netrw
" buffer, or if no Netrw buffer exists, opens up a new one.
" Look at ":help netrw" for more info on the possible settings
function NTL_Toggle()
	if(NTL_GetBufferFileType()!='netrw')
        " We are currently in a normal window and trying to switch to the
        " explorer window. Let's first try to find out which window is
        " currently displaying the explorer. Once we have found it we can
        " switch to this window based on the window number.
        let w_all = reverse(range(1, bufnr('$')))
        let w_found = -1
        " loop over all windows, and check if their buffer has syntax of
        " 'netrwlist', if so this is our explorer and we will switch to it
        for i in w_all
            " get the buffer of the window, then determine if it is a netrw
            " filetype, if so switch to this window
            let buf_info = getbufinfo(i)
            " first check if variable "current_syntax" exists
            let buf_syntax = -1
            if has_key(buf_info[0]['variables'], 'current_syntax')
                let buf_syntax = buf_info[0]['variables']['current_syntax']
            endif
            if(buf_syntax=='netrwlist')
                " check if the buffer is hidden
                if(buf_info[0]['hidden']==1)
                    " let's open up the existing buffer
                    let position = g:NTL_Position
                    " Left
                    if(position=="left")
                        silent execute ":vertical sb".i 
                        silent execute ":vertical resize ".(g:NTL_Width)
                    endif
                    " Right
                    if(position=="right")
                        silent execute ":vertical belowright sb".i 
                        silent execute ":vertical resize ".(g:NTL_Width)
                    endif
                    " Top
                    if(position=="top")
                        silent execute ":topleft sb".i 
                        silent execute ":resize ".(g:NTL_Height)
                    endif
                    " Bottom
                    if(position=="bottom")
                        silent execute ":botright sb".i 
                        silent execute ":resize ".(g:NTL_Height)
                    endif
                    return
                else
                    " this is the explorer window, we found it so let's break the
                    " loop and switch to this window
                    silent execute "normal! ".winbufnr(i)."\<C-w>\<C-w>"
                    let w_found = 1
                endif
                break
            endif
        endfor
        " Check if no window with the explorer was found, then open up a new
        " one at the position defined in "g:NTL_Position"
        if(w_found==-1)
            " lets open a new netrw window one
            call NTL_OpenNewWindow() 
        endif
	else
		" we are already inside a netrw window
		" switch to next window
		silent execute "normal! \<C-w>\<C-w>"
	endif
endfunction
function NTL_OpenNewWindow()
    let position = g:NTL_Position
    if(position=="left")
        silent execute ":Lexplore"
        silent execute ":vertical resize ".(g:NTL_Width)
    elseif(position=="right")
        silent execute ":Lexplore!"
        silent execute ":vertical resize ".(g:NTL_Width)
    elseif(position=="top")
        silent execute ":Hexplore!"
        silent execute ":resize ".(g:NTL_Height)
    else
        silent execute ":Hexplore"
        silent execute ":resize ".(g:NTL_Height)
    endif
endfunction




" Vim plugin to change the working directory to the project root.
"
" Copyright 2010-2016 Andrew Stewart, <boss@airbladesoftware.com>
" Released under the MIT licence.

if exists('g:loaded_rooter') || &cp
  finish
endif
let g:loaded_rooter = 1

let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''

if exists('+autochdir') && &autochdir && (!exists('g:rooter_manual_only') || !g:rooter_manual_only)
  set noautochdir
endif

if !exists('g:rooter_use_lcd')
  let g:rooter_use_lcd = 0
endif

if !exists('g:rooter_patterns')
  let g:rooter_patterns = ['.git', '.git/', '_darcs/', '.hg/', '.bzr/', '.svn/']
endif

if !exists('g:rooter_targets')
  let g:rooter_targets = '/,*'
endif

if !exists('g:rooter_change_directory_for_non_project_files')
  let g:rooter_change_directory_for_non_project_files = ''
endif

if !exists('g:rooter_silent_chdir')
  let g:rooter_silent_chdir = 0
endif

if !exists('g:rooter_resolve_links')
  let g:rooter_resolve_links = 0
endif

function! s:ChangeDirectory(directory)
  if a:directory !=# getcwd()
    let cmd = g:rooter_use_lcd == 1 ? 'lcd' : 'cd'
    execute ':'.cmd fnameescape(a:directory)
    if !g:rooter_silent_chdir
      execute ':cd '.a:directory
    endif
    if exists('#User#RooterChDir')
      execute 'doautocmd' s:nomodeline 'User RooterChDir'
    endif
  endif
endfunction

function! s:IsDirectory(pattern)
  return a:pattern[-1:] == '/'
endfunction

function! s:ChangeDirectoryForBuffer()
  let patterns = split(g:rooter_targets, ',')

  if isdirectory(s:fd)
    return index(patterns, '/') != -1
  endif

  if filereadable(s:fd) && empty(&buftype)
    if exists('*glob2regpat')
      for p in patterns
        if p !=# '/' && s:fd =~# glob2regpat(p)
          return 1
        endif
      endfor
    else
      return 1
    endif
  endif

  return 0
endfunction

" Returns the ancestor directory of s:fd matching `pattern`.
"
" The returned directory does not have a trailing path separator.
function! s:FindAncestor(pattern)
  let fd_dir = isdirectory(s:fd) ? s:fd : fnamemodify(s:fd, ':h')
  let fd_dir_escaped = escape(fd_dir, ' ')

  if s:IsDirectory(a:pattern)
    let match = finddir(a:pattern, fd_dir_escaped.';')
  else
    let [_suffixesadd, &suffixesadd] = [&suffixesadd, '']
    let match = findfile(a:pattern, fd_dir_escaped.';')
    let &suffixesadd = _suffixesadd
  endif

  if empty(match)
    return ''
  endif

  if s:IsDirectory(a:pattern)
    " If the directory we found (`match`) is part of the file's path
    " it is the project root and we return it.
    "
    " Compare with trailing path separators to avoid false positives.
    if stridx(fnamemodify(fd_dir, ':p'), fnamemodify(match, ':p')) == 0
      return fnamemodify(match, ':p:h')

    " Else the directory we found (`match`) is a subdirectory of the
    " project root, so return match's parent.
    else
      return fnamemodify(match, ':p:h:h')
    endif

  else
    return fnamemodify(match, ':p:h')
  endif
endfunction

function! s:SearchForRootDirectory()
  for pattern in g:rooter_patterns
    let result = s:FindAncestor(pattern)
    if !empty(result)
      return result
    endif
  endfor
  return ''
endfunction

function! s:RootDirectory()
  let root_dir = getbufvar('%', 'rootDir')
  if empty(root_dir)
    let root_dir = s:SearchForRootDirectory()
    if !empty(root_dir)
      call setbufvar('%', 'rootDir', root_dir)
    endif
  endif
  return root_dir
endfunction

function! s:ChangeToRootDirectory()
  " A directory will always have a trailing path separator.
  let s:fd = expand('%:p')
  if empty(s:fd)
    let s:fd = getcwd()
  endif
  if g:rooter_resolve_links
    let s:fd = resolve(s:fd)
  endif
  let root_dir = s:RootDirectory()
  if empty(root_dir)
    " Test against 1 for backwards compatibility
    if g:rooter_change_directory_for_non_project_files == 1 ||
          \ g:rooter_change_directory_for_non_project_files ==? 'current'
      if expand('%') != ''
        call s:ChangeDirectory(fnamemodify(s:fd, ':h'))
      endif
    elseif g:rooter_change_directory_for_non_project_files ==? 'home'
      call s:ChangeDirectory($HOME)
    endif
  else
    call s:ChangeDirectory(root_dir)
  endif
endfunction

call <SID>ChangeToRootDirectory()


